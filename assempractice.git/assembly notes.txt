assembly notes //internalising git commands via command line

about binary numbers
ones and 2s complimennt
overflow representation
representing non integers
IEEE notation
ascii table
unicode accents

control unit-accesses program instructions, decodes them
and controls io of alu, registers and output devices
von neumann architecture = data and instruction in same memory
pipelininig box chart
superscalar has many pipelines for simultaneous insttructions

memorymodels
linear 32bit adress space
4gb memory adress
1,2,4 byte intergers
data or adress,decided by progammer
floating point 
no aggregate type ike arrays or structures
artithmetic or logic, data transfer control program flow

label: mnemonic [operands] ;comments

overflow = sum of positives = negative or sum of negatives = positive


or destination, source  (if any place as an 1, then result is 1)
xor destination, source (flips bits with 11111, no changes with 0000)
NOT inverts all bits (ones compliment)
negate = two's compliment

set bits 4 and 5 to convert numerical to ascii

check even, and with 1, check last bit if zero (jz)
test is like and, but result is not stored
e.g test al, 00000011b  //0 test
jz valuenotfound

cmp compares 2 values, no values are stored
e,g mov al, 5
cmp al,5 //zero flag has been set
jmp below/above = unsigned
jmp less greater = signed
je = jump if equal

after start, use noop //for gdb usage
in assemble time, -g and -F is required
(gdb) break *_start+1
(gdb) set disessembly-flavor intel
(gdb) disassemble _start
(gdb) r 
(gdb) info registers //displays registers
(gdb) si // = next step
(gdb) x/16cb &EatMsg // x = examine memory, 16 = byte count
(gdb) quit
stdin = keyboard
stdout = monitor
convert lower to upper by subtracting 20h
exit program via sys_exit
int 80h = calls sys_read
cmp byte [Buff], 61h //lower case about a
jb Write
cmp byte [Buff], 7Ah ///test vs z
/usr/bin/time -p ./hello2
/usr/bin/time -v ./hello2 //verbose

gcc -m32 myprog.o -o myprog
-m32 is for 64 bit systems for 32 bit compatability
push intval ;push address of int
push iformat ;push string format
call scanf
add esp, 8 ; stack clenaup for the 2 parameters x 4 bytes = 8
file * fopen (chat *name, char *mode) //mode r w a or r+ w+ a+ read write append
-1 for error
int getc //get char for file
putc
stdin, stdout, stderr are like any files
stdin, -keyboard; stdout, stderr -screen
#define getchar() getc(stdin)

formatted ioint fscanf(FILE *fp,)// fill in
int fflash(FILE *stream);
force c  library to write any buffered data using unix IO

